{"data":{"site":{"siteMetadata":{"title":"relevant programmer","author":"Ashok Dudhade"}},"markdownRemark":{"id":"f4b15c9d-c2a0-50e2-9315-5d8db45c5b14","excerpt":"Prerequisites: Nodejs yarn create-react-app There are so many posts available for creating react app with yarn workspaces, but I have not…","html":"<p>Prerequisites:</p>\n<ul>\n<li>Nodejs</li>\n<li>yarn</li>\n<li>create-react-app</li>\n</ul>\n<p>There are so many posts available for creating react app with yarn workspaces, but I have not came across any article with typescript.</p>\n<p>To create a sample app we will use <code class=\"language-text\">create-react-app</code> utility.</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">create-react-app typescript-react-yarn-worspaces --scripts-version=react-scripts-ts</code></pre></div>\n</li>\n</ul>\n<p>cd typescript-react-yarn-worspaces</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Eject app to unpack all configuration files into our application</code></pre></div>\n<p>yarn eject</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">It will display a message &quot;Are you sure you want to eject? This action is permanent.&quot; Press &#39;y&#39; to confirm. It should unpack configuration files.\n\n\n``\n\nWhy yarn workspaces?\n\nMultiple reusable packages can be adding in single repository which can depend on each other with single yarn lock file at root directory. This also has benefit of always referring to latest package source code.\n\n\nOpen new &#39;typescript-react-yarn-worspaces&#39; directory in your favorite IDE.\n\nCreate a directory for packages at root level (```typescript-react-yarn-worspaces\\packages```).\n\nOpen package.json file and add worspaces details.</code></pre></div>\n<p>“workspaces”: [“packages/*”]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Modify webpack configuration to include &quot;packages&quot; directory in build and watch.\n\nAdd packagesSrc in paths.js file. (&quot;typescript-react-yarn-worspaces/config/paths.js&quot;)\n\n![packages source entry](./paths-01.png)\n\n\nModify webpack.config.dev.js to include packages directory.(typescript-react-yarn-worspaces/config/webpack.config.dev.js)\n\n![dev 01](./dev-01.png)\n\n\n![dev 02](./dev-02.png)\n\n\n![dev 03](./dev-03.png)\n\n\n![dev 04](./dev-04.png)\n\n\n\n\nModify webpack.config.prod.js to include packages directory.(typescript-react-yarn-worspaces/config/webpack.config.prod.js)\n\n![prod 01](./prod-01.png)\n![prod 02](./prod-02.png)\n![prod 03](./prod-03.png)\n\n\n\nNow let&#39;s create a reusable &quot;Header&quot; component for the application. Create a &#39;header&#39; directory inside packages(```typescript-react-yarn-worspaces\\packages\\header```) and add below files.\n\nAdd package.json file(```typescript-react-yarn-worspaces\\packages\\header\\package.json```).</code></pre></div>\n<p>{\n“name”: “@my-app/header”,\n“version”: “0.1.0”,\n“private”: true,\n“dependencies”: {\n“react”: “^16.5.2”,\n“react-dom”: “^16.5.2”\n},\n“devDependencies”: {\n“@types/node”: “^10.11.4”,\n“@types/react”: “^16.4.16”,\n“@types/react-dom”: “^16.0.8”,\n“typescript”: “^3.1.1”\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Add index.tsx file(```typescript-react-yarn-worspaces\\packages\\header\\index.tsx```).</code></pre></div>\n<p>import * as React from ‘react’;\nimport ‘./App.css’;</p>\n<p>export class Header extends React.Component {\npublic render() {\nreturn (\n<header className=\"App-header\">\n<h1 className=\"App-title\">Header from packages</h1>\n</header>\n);\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Modify root package json to add header package dependency along with App.tsx file.\n\npackage.json dependency\n\n![package-json](./package-json.png)\n\nApp.tsx</code></pre></div>\n<p>import { Header } from ‘@my-app/header’;\nimport * as React from ‘react’;\nimport ‘./App.css’;</p>\n<p>class App extends React.Component {\npublic render() {\nreturn (\n<div className=\"App\">\n<Header/>\n<p className=\"App-intro\">\nTo get started, edit <code>src/App.tsx</code> and save to reload.\n</p>\n</div>\n);\n}\n}</p>\n<p>export default App;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">To start app do as below.</code></pre></div>\n<p>yarn install\nyarn start</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Code is available at [github](https://github.com/ashokdudhade/typescript-react-yarn-worspaces)</code></pre></div>","frontmatter":{"title":"Typescript react app with yarn workspaces","date":"October 09, 2018"}}},"pageContext":{"slug":"/typescript-react-app-with-yarn-worspaces/","previous":{"fields":{"slug":"/docker-for-programmers/"},"frontmatter":{"title":"Docker for programmers"}},"next":null}}